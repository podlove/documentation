{
  "openapi": "3.0.1",
  "info": {
    "title": "Podlove Publisher API",
    "version": "2"
  },
  "servers": [
    {
      "url": "http://podlove.local/wp-json"
    }
  ],
  "tags": [],
  "paths": {
    "/podlove/v2/analytics/episodes": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Get download numbers per episode for all episodes.",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string",
              "items": {
                "type": "string",
                "enum": [
                  "json",
                  "csv"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsArray"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/podlove/v2/analytics/episodes/{id}": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Get download numbers for an episode.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Analytics"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/podcast": {
      "get": {
        "tags": [
          "podcast"
        ],
        "description": "Get the information about the podcast",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Podcast"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "podcast"
        ],
        "description": "Update the information about the podcast",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Podcast"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "podcast"
        ],
        "description": "Update the information about the podcast",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Podcast"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "patch": {
        "tags": [
          "podcast"
        ],
        "description": "Update the information about the podcast",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Podcast"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/podlove/v2/episodes": {
      "get": {
        "tags": [
          "episodes"
        ],
        "description": "A list of episodes",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "The status parameter is used to filter the collection of episodes",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "publish",
                "draft",
                "all"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfEpisodes"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "episodes"
        ],
        "description": "Create a new episode",
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreateEpisode"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "description": "Internal Server error",
            "content": {}
          }
        }
      }
    },
    "/podlove/v2/episodes/{id}": {
      "get": {
        "tags": [
          "episodes"
        ],
        "description": "The information about an episode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EpisodeOut"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "episodes"
        ],
        "description": "Update the information about an episode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EpisodeIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "episodes"
        ],
        "description": "Update the information about an episode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EpisodeIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "episodes"
        ],
        "description": "Update the information about an episode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EpisodeIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "episodes"
        ],
        "description": "Move an episode to the wordpress trash",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/episodes/{id}/media": {
      "get": {
        "tags": [
          "episodes/media"
        ],
        "description": "The information about the assets of an episode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfEpisodesMedia"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/podlove/v2/episodes/{id}/media/{asset_id}/disable": {
      "post": {
        "tags": [
          "episodes/media"
        ],
        "description": "Disable an episode asset",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/EpisodeId"
          },
          {
            "$ref": "#/components/parameters/AssetId"
          }
        ]
      },
      "patch": {
        "tags": [
          "episodes/media"
        ],
        "description": "Disable an episode asset",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/EpisodeId"
          },
          {
            "$ref": "#/components/parameters/AssetId"
          }
        ]
      },
      "put": {
        "tags": [
          "episodes/media"
        ],
        "description": "Disable an episode asset",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/EpisodeId"
          },
          {
            "$ref": "#/components/parameters/AssetId"
          }
        ]
      }
    },
    "/podlove/v2/episodes/{id}/media/{asset_id}/enable": {
      "post": {
        "tags": [
          "episodes/media"
        ],
        "description": "Enable an episode asset",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/EpisodeId"
          },
          {
            "$ref": "#/components/parameters/AssetId"
          }
        ]
      },
      "patch": {
        "tags": [
          "episodes/media"
        ],
        "description": "Enable an episode asset",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/EpisodeId"
          },
          {
            "$ref": "#/components/parameters/AssetId"
          }
        ]
      },
      "put": {
        "tags": [
          "episodes/media"
        ],
        "description": "Enable an episode asset",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/EpisodeId"
          },
          {
            "$ref": "#/components/parameters/AssetId"
          }
        ]
      }
    },
    "/podlove/v2/episodes/{id}/media/{asset_id}/verify": {
      "post": {
        "tags": [
          "episodes/media"
        ],
        "description": "Verify an episode asset",
        "responses": {
          "200": {
            "description": "The request was successful. Includes file size and url.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "file_size": {
                      "type": "integer"
                    },
                    "file_url": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "status": "ok",
                  "file_size": 12596,
                  "file_url": "https://example.com/audio.mp3"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/EpisodeId"
          },
          {
            "$ref": "#/components/parameters/AssetId"
          }
        ]
      },
      "patch": {
        "tags": [
          "episodes/media"
        ],
        "description": "Verify an episode asset",
        "responses": {
          "200": {
            "description": "The request was successful. Includes file size and url.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "file_size": {
                      "type": "integer"
                    },
                    "file_url": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "status": "ok",
                  "file_size": 12596,
                  "file_url": "https://example.com/audio.mp3"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/EpisodeId"
          },
          {
            "$ref": "#/components/parameters/AssetId"
          }
        ]
      },
      "put": {
        "tags": [
          "episodes/media"
        ],
        "description": "Verify an episode asset",
        "responses": {
          "200": {
            "description": "The request was successful. Includes file size and url.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "file_size": {
                      "type": "integer"
                    },
                    "file_url": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "status": "ok",
                  "file_size": 12596,
                  "file_url": "https://example.com/audio.mp3"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/EpisodeId"
          },
          {
            "$ref": "#/components/parameters/AssetId"
          }
        ]
      }
    },
    "/podlove/v2/episodes/{id}/related": {
      "get": {
        "tags": [
          "episodes/related"
        ],
        "description": "Get a list of related episode to the episode.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "publish",
                "draft",
                "all"
              ]
            },
            "in": "query",
            "name": "status",
            "description": "The result should be included the episodes in the published and draft status. As a public user you get only published episodes and the status parameter has no impact"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfEpisodesRelated"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": ""
      },
      "put": {
        "tags": [
          "episodes/related"
        ],
        "description": "Set a list of related episodes to the episode. The existing items will be deleted before the new values set.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EpisodeRelatedIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "episodes/related"
        ],
        "description": "Set a list of related episodes to the episode. The existing items will be deleted before the new values set.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EpisodeRelatedIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "episodes/related"
        ],
        "description": "Set a list of related episodes to the episode. The existing items will be deleted before the new values set.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EpisodeRelatedIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Unique identifier for the episode"
        }
      ],
      "delete": {
        "tags": [
          "episodes/related"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Delete the related episode to the episode",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the episode"
          }
        ]
      }
    },
    "/podlove/v2/episodes/related": {
      "post": {
        "tags": [
          "episodes/related"
        ],
        "description": "Create an episode relation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelatedIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/episodes/related/{id}": {
      "get": {
        "tags": [
          "episodes/related"
        ],
        "description": "Get an episode relation.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode relation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "publish",
                "draft"
              ]
            },
            "in": "query",
            "name": "status",
            "description": "The result should be included the episodes in the published and draft status. As a public user you get only published episodes and the filter has no impact"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedOut"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": ""
      },
      "put": {
        "tags": [
          "episodes/related"
        ],
        "description": "Modify an episode relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelatedIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "episodes/related"
        ],
        "description": "Modify an episode relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EpisodeRelatedIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "episodes/related"
        ],
        "description": "Modify an episode relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelatedIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Unique identifier for the episode relation"
        }
      ],
      "delete": {
        "tags": [
          "episodes/related"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "description": "Delete an episode relation.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the episode relation"
          }
        ]
      }
    },
    "/podlove/v2/episodes/{id}/tags": {
      "get": {
        "tags": [
          "episodes/tags"
        ],
        "description": "Get a list of tags to the episode.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfEpisodesTags"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": ""
      },
      "put": {
        "tags": [
          "episodes/tags"
        ],
        "description": "Set a tag or a list of tags to the episode.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EpisodeTagsIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "episodes/tags"
        ],
        "description": "Set a tag or a list of tags to the episode.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EpisodeTagsIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "episodes/tags"
        ],
        "description": "Set a tag or a list of tags to the episode.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EpisodeTagsIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Unique identifier for the episode"
        }
      ],
      "delete": {
        "tags": [
          "episodes/tags"
        ],
        "description": "Delete the tags to the episode.\nOnly the links to the tags will be deleted. The tags themselves are not removed.\n",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the episode"
          }
        ]
      }
    },
    "/podlove/v2/episodes/{id}/contributions": {
      "get": {
        "tags": [
          "episodes/contributions"
        ],
        "description": "A list of contributors who contribute to the episode.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionsEpisodeArray"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "episodes/contributions"
        ],
        "description": "Modify a list contributor who contribute to the episode.  The existing entries are deleted before the transferred entries are added.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributionsEpisodeArrayIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "episodes/contributions"
        ],
        "description": "Add a contributor to the episode. ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionCreated"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "episodes/contributions"
        ],
        "description": "Modify a list contributor who contribute to the episode.  The existing entries are deleted before the transferred entries are added.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "UUnique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributionsEpisodeArrayIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "episodes/contributions"
        ],
        "description": "Remove all contributors who contribute to the episode.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/episodes/contributions/{id}": {
      "get": {
        "tags": [
          "episodes/contributions"
        ],
        "description": "A contributor who contribute to the episode.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the contribution.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionsEpisode"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "episodes/contributions"
        ],
        "description": "Add a contributor who contribute to the episode.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the contribution.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributionsEpisodeIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "episodes/contributions"
        ],
        "description": "Add a contributor who contribute to the episode.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the contribution.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributionsEpisodeIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "episodes/contributions"
        ],
        "description": "Add a contributor who contribute to the episode.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "UUnique identifier for the contribution.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributionsEpisodeIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "episodes/contributions"
        ],
        "description": "Remove a contributor who contribute to the episode.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the contribution.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/chapters/{id}": {
      "get": {
        "tags": [
          "chapters"
        ],
        "description": "The list of chapters to an episode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chapters"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "chapters"
        ],
        "description": "Edit the chapters list to an epsiode, old chapter list will be deleted.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Chapters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "chapters"
        ],
        "description": "Edit the chapters list to an epsiode, old chapter list will be deleted.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Chapters"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "chapters"
        ],
        "description": "Edit the chapters list to an epsiode, old chapter list will be deleted.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Chapters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "description": "Delete the chapters list for an epsiode.",
        "tags": [
          "chapters"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/transcripts/{id}": {
      "get": {
        "tags": [
          "transcripts"
        ],
        "summary": "Returns the transcript of the episode.",
        "description": "Wihtout limit and offset, you get the whole transcript.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many entries should be delivered?",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "From which entry should the data be delivered?",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "How many entries are there? Ignored limit and offset.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transcripts"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "transcripts"
        ],
        "summary": "Add a transcript to the episode.",
        "description": "The content part of the request have to use the vtt format and must be UTF-8 encoded.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "vtt"
                    ]
                  },
                  "content": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "transcript": {
                      "$ref": "#/components/schemas/Transcripts"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ParseError"
          }
        }
      },
      "put": {
        "tags": [
          "transcripts"
        ],
        "summary": "Add a transcript to the episode.",
        "description": "The content part of the request have to use the vtt format and must be UTF-8 encoded.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "vtt"
                    ]
                  },
                  "content": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "transcript": {
                      "$ref": "#/components/schemas/Transcripts"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": "500",
                  "message": "Sorry, we can not parse your vtt content."
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "transcripts"
        ],
        "summary": "Add a transcript to the episode.",
        "description": "The content part of the request have to use the vtt format and must be UTF-8 encoded.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "vtt"
                    ]
                  },
                  "content": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "transcript": {
                      "$ref": "#/components/schemas/Transcripts"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "code": "500",
                  "message": "Sorry, we can not parse your vtt content."
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "transcripts"
        ],
        "description": "Delete the transcript of an episode.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/transcripts/voices/{id}": {
      "get": {
        "tags": [
          "transcripts/voices"
        ],
        "summary": "A list of the voices.",
        "description": "A list of the voices on the episode's transcript.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Voices"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "transcripts/voices"
        ],
        "summary": "Update the list of the voices.",
        "description": "Update the list of the voices on the episode's transcript.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Voices"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "transcripts/voices"
        ],
        "summary": "Update the list of the voices.",
        "description": "Update the list of the voices on the episode's transcript.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Voices"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "transcripts/voices"
        ],
        "summary": "Update the list of the voices.",
        "description": "Update the list of the voices on the episode's transcript.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Voices"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/transcripts/paragraphs/{id}": {
      "get": {
        "tags": [
          "transcripts/paragraphs"
        ],
        "description": "A part of the transcription (called chaption).",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the part of the transcription (called chaption).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChaptionOut"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "transcripts/paragraphs"
        ],
        "description": "Edit a chaption of the transcript",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the part of the transcription (called chaption).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChaptionIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "transcripts/paragraphs"
        ],
        "description": "Edit a chaption of the transcript",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the part of the transcription (called chaption).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChaptionIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "transcripts/paragraphs"
        ],
        "description": "Edit a chaption of the transcript",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the part of the transcription (called chaption).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChaptionIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "transcripts/paragraphs"
        ],
        "description": "Delete a chaption of the transcript",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the part of the transcription (called chaption).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/social/services": {
      "get": {
        "tags": [
          "social"
        ],
        "description": "A list of supported social services.",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "Select a category of social services",
            "schema": {
              "type": "string",
              "enum": [
                "social",
                "donation",
                "internal"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialServicesArray"
                }
              }
            }
          }
        }
      }
    },
    "/podlove/v2/social/services/{id}": {
      "get": {
        "tags": [
          "social"
        ],
        "description": "A supported social services.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Select a category of social services",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialServices"
                }
              }
            }
          }
        }
      }
    },
    "/podlove/v2/social/contributors/{id}": {
      "get": {
        "tags": [
          "social/contributors"
        ],
        "description": "A list of social services of a contributor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Identifier of the contributor",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "category: social, donation, internal",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributorSocialServicesArray"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "social/contributors"
        ],
        "description": "Add a social services of a contributor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Identifier of the contributor",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "category: social, donation, internal",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributorSocialServicesAdd"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/social/contributors/service/{id}": {
      "get": {
        "tags": [
          "social/contributors/service"
        ],
        "description": "A social services of a contributor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Social service id from the podcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributorSocialServices"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "social/contributors/service"
        ],
        "description": "Modify a social service of a contributor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the social service of a contributor.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorSocialServicesIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "social/contributors/service"
        ],
        "description": "Modify a social service of a contributor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the social service of a contributor.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorSocialServicesIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "social/contributors/service"
        ],
        "description": "Modify a social service of a contributor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the social service of a contributor.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorSocialServicesIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "social/contributors/service"
        ],
        "description": "Delete a social service of a contributor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the social service of a contributor",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/social/podcast": {
      "get": {
        "tags": [
          "social/podcast"
        ],
        "description": "A list of social services from the podcast.",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "category: social, donation, internal",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodcastSocialServicesArray"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "social/podcast"
        ],
        "description": "Add a social services for the podcast.",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "category: social, donation, internal",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodcastSocialServicesAdd"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/social/podcast/service/{id}": {
      "get": {
        "tags": [
          "social/podcast/service"
        ],
        "description": "A social services from the podcast.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Social service id from the podcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodcastSocialServices"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "social/podcast/service"
        ],
        "description": "Modify a social service from the podcast",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the social service from the podcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PodcastSocialServicesIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "social/podcast/service"
        ],
        "description": "Modify a social service from the podcast",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the social service from the podcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PodcastSocialServicesIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "social/podcast/service"
        ],
        "description": "Modify a social service from the podcast",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the social service from the podcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PodcastSocialServicesIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "social/podcast/service"
        ],
        "description": "Delete a social service from the podcast",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the social service from the podcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/shownotes": {
      "get": {
        "tags": [
          "shownotes"
        ],
        "description": "A list of shownotes for an episode.",
        "parameters": [
          {
            "name": "episode_id",
            "in": "query",
            "description": "Limit result set by episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShownotesArray"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "shownotes"
        ],
        "description": "Add a shownotes item for an episode.",
        "parameters": [
          {
            "name": "episode_id",
            "in": "query",
            "description": "Limit result set by episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the created shownotes",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "topic",
                "link"
              ]
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title of the created shownotes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShownotesIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Info about the created contributor group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shownotes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/shownotes/{id}": {
      "get": {
        "tags": [
          "shownotes"
        ],
        "description": "A shownote item for an episode.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shownotes"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "shownotes"
        ],
        "description": "Update a shownotes item for an episode.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShownotesIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "shownotes"
        ],
        "description": "Update a shownotes item for an episode.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShownotesIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "shownotes"
        ],
        "description": "Update a shownotes item for an episode.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShownotesIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "shownotes"
        ],
        "description": "Delete a shownotes item for an episode.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/shownotes/{id}/unfurl": {
      "post": {
        "tags": [
          "shownotes"
        ],
        "summary": "Extract URL metadata",
        "description": "Uses the backend at https://plus.podlove.org/api/unfurl with the `original_url` of the entry to automatically set title, description, site name, site url, image and icon.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/podlove/v2/shownotes/osf": {
      "post": {
        "tags": [
          "shownotes"
        ],
        "summary": "Import from OSF plugin",
        "description": "Generates shownotes entries from the \"OSF\" plugin.",
        "parameters": [
          {
            "name": "post_id",
            "in": "query",
            "description": "Releated post id to the episode.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/podlove/v2/shownotes/html": {
      "post": {
        "tags": [
          "shownotes"
        ],
        "summary": "Import from HTML",
        "description": "The HTML used is either the provided `html` parameter or `the_content` of the WordPress post.\n\nEvery link (`a` tag) encountered creates a shownotes entry of type `link` with the `original_url` set to its `href` attribute and the `title` set to the `a` content.\n\nEvery section heading (`h1`–`h6` tag) encountered creates a shownotes entry of type `topic` with the `title` set to the heading content.",
        "parameters": [
          {
            "name": "html",
            "in": "query",
            "description": "html string. If not supplied, the content of the post is used.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/podlove/v2/contributors": {
      "get": {
        "tags": [
          "contributors"
        ],
        "summary": "A list of contributors of the podcast",
        "description": "If you are not authentificate, you will get only the visible contributors. The all filter will be ignored.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "The filter parameter is used to filter the collection of contributors.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "all",
                  "visible"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributorsOut"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "contributors"
        ],
        "description": "Add a contributor to the podcast.",
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreateContributor"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/podlove/v2/contributors/{id}": {
      "get": {
        "tags": [
          "contributors"
        ],
        "summary": "A contributor of the podcast",
        "description": "If you are not authentificate, you will get only the information, if the contributor visible.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for contributor.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributorsOut"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "contributors"
        ],
        "description": "Update the information about a contributor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for contributor.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorsIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "contributors"
        ],
        "description": "Update the information about a contributor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for contributor.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorsIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "contributors"
        ],
        "description": "Update the information about a contributor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for contributor.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorsIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "contributors"
        ],
        "description": "Delete the information about a contributor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for contributor.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/contributors/groups": {
      "get": {
        "tags": [
          "contributors/groups"
        ],
        "description": "A list of groups to divide contributors by type of participation.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributorGroupsArray"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "contributors/groups"
        ],
        "description": "Create a group of contributors.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          }
        }
      }
    },
    "/podlove/v2/contributors/groups/{id}": {
      "get": {
        "tags": [
          "contributors/groups"
        ],
        "description": "Get the information about a group of contributors.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for contributor group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateContributorGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "contributors/groups"
        ],
        "description": "Update the group of contributor informations.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for contributor group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "contributors/groups"
        ],
        "description": "Update the group of contributor informations.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for contributor group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "contributors/groups"
        ],
        "description": "Update the group of contributor informations.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for contributor group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "contributors/groups"
        ],
        "description": "Delete a contributor group.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for contributor group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/contributors/roles": {
      "get": {
        "tags": [
          "contributors/roles"
        ],
        "summary": "A list of roles for contributors.",
        "description": "Use roles to assign a certain type of activity to a single contributor independent of any assigned group.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributorRolesArray"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "contributors/roles"
        ],
        "description": "Create a role for contributors.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          }
        }
      }
    },
    "/podlove/v2/contributors/roles/{id}": {
      "get": {
        "tags": [
          "contributors/roles"
        ],
        "description": "Get the information about a role for contributors.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for contributor role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateContributorRole"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "contributors/roles"
        ],
        "description": "Update the role for contributor informations.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for contributor role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorRole"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "contributors/roles"
        ],
        "description": "Update the role for contributor informations.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for contributor role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorRole"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "contributors/roles"
        ],
        "description": "Update the role for contributor informations.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for contributor role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorRole"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "contributors/roles"
        ],
        "description": "Delete a contributor role.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for contributor role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/contributors/defaults": {
      "get": {
        "tags": [
          "contributors/defaults"
        ],
        "summary": "A list of default contributors.",
        "description": "Default Contributors will be automatically added to the list of contributors for new episodes.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributorDefaultsArray"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "contributors/defaults"
        ],
        "description": "Create a default contributors.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateContributorDefault"
          }
        }
      }
    },
    "/podlove/v2/contributors/defaults/{id}": {
      "get": {
        "tags": [
          "contributors/defaults"
        ],
        "description": "Get the information about a default contributors.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for default contributor.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateContributorRole"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "contributors/defaults"
        ],
        "description": "Update the default contributor informations.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for default contributor.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorDefault"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "contributors/defaults"
        ],
        "description": "Update the default contributor informations.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for default contributor.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorDefault"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "contributors/defaults"
        ],
        "description": "Update the default contributor informations.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for default contributor.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorDefault"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "contributors/defaults"
        ],
        "description": "Delete a default contributor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for default contributor.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/podlove/v2/contributors/{id}/episodes": {
      "get": {
        "tags": [
          "contributors/episodes"
        ],
        "description": "A list of episodes with the contributor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for contributor.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfEpisodesContributor"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "OK": {
        "description": "The request was successfully.",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            },
            "example": {
              "status": "ok"
            }
          }
        }
      },
      "NotFound": {
        "description": "Requested resources was not found.",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            },
            "example": {
              "code": "404",
              "message": "sorry, we do not found the requested resource"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Authorization information is missing or invalid.",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            },
            "example": {
              "code": "401",
              "message": "sorry, you do not have permissions to use this REST API endpoint"
            }
          }
        }
      },
      "Created": {
        "description": "Creation request was successfully.",
        "content": {
          "application:/json": {
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CreateEpisode": {
        "description": "Info about the created episode",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateEpisode"
            }
          }
        }
      },
      "CreateContributor": {
        "description": "Info about the created contributor group.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateContributorGroup"
            }
          }
        }
      },
      "CreateContributorGroup": {
        "description": "Info about the created contributor.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateContributorRole"
            }
          }
        }
      },
      "CreateContributorRole": {
        "description": "Info about the created contributor role.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateContributor"
            }
          }
        }
      },
      "CreateContributorDefault": {
        "description": "Info about the created default contributor.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateContributorDefault"
            }
          }
        }
      },
      "ParseError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            },
            "example": {
              "code": "500",
              "message": "Sorry, we can not parse your vtt content."
            }
          }
        }
      }
    },
    "schemas": {
      "Podcast": {
        "type": "object",
        "example": {
          "version": "v2",
          "title": "Podlovers",
          "subtitle": "Der Podlove Entwickler:innen Podcast",
          "summary": "Podlove ist eine Initiative zur Verbesserung der Open Source Infrastruktur zum Podcasting. Podlove ist gleichzeitig auch ein Netzwerk an Entwickler:innen zur Diskussion von Features und Standardisierung.",
          "mnemonic": "LOV",
          "itunes_type": "episodic",
          "author_name": "Podlove team",
          "poster": null,
          "link": "https://podlovers.org",
          "funding_url": "",
          "funding_label": "",
          "copyright": "© 2022 Podlovers",
          "expicit": false,
          "category": "Technology"
        },
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "title": {
            "type": "string",
            "description": "Title of the podcast"
          },
          "subtitle": {
            "type": "string",
            "description": "Extension to the title. Clarify what the podcast is about."
          },
          "summary": {
            "type": "string",
            "description": "Elaborate description of the podcasts content."
          },
          "mnemonic": {
            "type": "string",
            "description": "Abbreviation for your podcast."
          },
          "itunes_type": {
            "type": "string",
            "enum": [
              "episodic",
              "serial"
            ]
          },
          "author_name": {
            "type": "string",
            "description": "Name of the podcast author. Publicly displayed in Podcast directories."
          },
          "podcast_email": {
            "type": "string",
            "description": "Used by iTunes and other Podcast directories to contact you."
          },
          "poster": {
            "type": "string",
            "nullable": true
          },
          "link": {
            "type": "string"
          },
          "funding_url": {
            "type": "string",
            "description": "Can be used by podcatchers show funding/donation links for the podcast."
          },
          "funding_label": {
            "type": "string",
            "description": "Label for funding/donation URL."
          },
          "copyright": {
            "type": "string",
            "description": "Copyright notice for content in the channel."
          },
          "explicit": {
            "type": "boolean",
            "description": "Is the overall content of the podcast explicit?"
          },
          "category": {
            "type": "string",
            "enum": [
              "Arts",
              "Design",
              "Fashion & Beauty",
              "Food",
              "Books",
              "Performing Arts",
              "Visual Arts",
              "Business",
              "Careers",
              "Investing",
              "Management",
              "Entrepreneurship",
              "Marketing",
              "Non-Profit",
              "Comedy",
              "Comedy Interviews",
              "Improv",
              "Stand-Up",
              "Education",
              "Language Learning",
              "Courses",
              "How To",
              "Self-Improvement",
              "Fiction",
              "Comedy Fiction",
              "Drama",
              "Science Fiction",
              "Government",
              "History",
              "Health & Fitness",
              "Alternative Health",
              "Fitness",
              "Sexuality",
              "Medicine",
              "Mental Health",
              "Nutrition",
              "Kids & Family",
              "Education for Kids",
              "Parenting",
              "Pets & Animals",
              "Stories for Kids",
              "Leisure",
              "Animation & Manga",
              "Automotive",
              "Aviation",
              "Crafts",
              "Games",
              "Hobbies",
              "Home & Garden",
              "Video Games",
              "Music",
              "Music Commentary",
              "Music History",
              "Music Interviews",
              "News",
              "Business News",
              "Daily News",
              "Entertainment News",
              "News Commentary",
              "Politics",
              "Sports News",
              "Tech News",
              "Religion & Spirituality",
              "Buddhism",
              "Christianity",
              "Hinduism",
              "Islam",
              "Judaism",
              "Religion",
              "Spirituality",
              "Science",
              "Natural Sciences",
              "Social Sciences",
              "Astronomy",
              "Chemistry",
              "Earth Sciences",
              "Life Sciences",
              "Mathematics",
              "Nature",
              "Physics",
              "Society & Culture",
              "Personal Journals",
              "Philosophy",
              "Places & Travel",
              "Relationships",
              "Documentary",
              "Sports",
              "Baseball",
              "Basketball",
              "Cricket",
              "Fantasy Sports",
              "Football",
              "Golf",
              "Hockey",
              "Rugby",
              "Running",
              "Soccer",
              "Swimming",
              "Tennis",
              "Volleyball",
              "Wilderness",
              "Wrestling",
              "Technology",
              "True Crime",
              "TV & Film",
              "After Shows",
              "Film History",
              "Film Interviews",
              "Film Reviews",
              "TV Reviews"
            ],
            "description": "iTunes category of the podcast"
          }
        }
      },
      "ShownotesArray": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Shownotes"
        },
        "example": [
          {
            "id": 1,
            "episode_id": 2,
            "type": "topic",
            "state": "null",
            "position": -2,
            "unfurl_data": null,
            "original_url": "null",
            "affiliate_url": "null",
            "url": "null",
            "title": "Dieser Text gehört zu den Shownotes",
            "description": "null",
            "site_name": "null",
            "site_url": "null",
            "icon": "null",
            "image": "null",
            "created_at": "null",
            "hidden": "null"
          },
          {
            "id": 6,
            "episode_id": 2,
            "type": "link",
            "state": "fetched",
            "position": 3,
            "unfurl_data": {
              "description": null,
              "embed": null,
              "icon": {
                "height": "32,",
                "type": "icon,",
                "url": "https://podlove.org/files/2014/06/cropped-podlove-avatar-bkd-1024-32x32.png,",
                "width": 32
              },
              "image": null,
              "locations": [
                "https://podlove.org"
              ],
              "original_url": "https://podlove.org",
              "screenshot_url": "https://plus.podlove.org/api/rest/v1/unfurl/screenshot?url=https%3A%2F%2Fpodlove.org",
              "site_name": "podlove.org",
              "site_url": "https://podlove.org",
              "title": "Podlove | Personal Media Development",
              "url": "https://podlove.org/"
            },
            "original_url": "https://podlove.org",
            "affiliate_url": null,
            "url": "https://podlove.org/",
            "title": "Podlove | Personal Media Development,",
            "description": null,
            "site_name": "podlove.org",
            "site_url": "https://podlove.org",
            "icon": "https://podlove.org/files/2014/06/cropped-podlove-avatar-bkd-1024-32x32.png",
            "image": null,
            "created_at": null,
            "hidden": null
          }
        ]
      },
      "Shownotes": {
        "type": "object",
        "description": "A single item in the shownotes",
        "example": {
          "id": 1,
          "episode_id": 2,
          "type": "topic",
          "state": "null",
          "position": -2,
          "unfurl_data": null,
          "original_url": "null",
          "affiliate_url": "null",
          "url": "null",
          "title": "Dieser Text gehört zu den Shownotes",
          "description": "null",
          "site_name": "null",
          "site_url": "null",
          "icon": "null",
          "image": "null",
          "created_at": "null",
          "hidden": "null"
        },
        "properties": {
          "id": {
            "type": "integer",
            "description": "Identifier of the shownotes item."
          },
          "episode_id": {
            "type": "integer",
            "description": "Identifier of the releated episode for the shownotes item."
          },
          "type": {
            "type": "string",
            "description": "Type of the shownotes item.",
            "enum": [
              "topic",
              "link"
            ]
          },
          "state": {
            "type": "string"
          },
          "position": {
            "type": "integer"
          },
          "unfurl_data": {
            "type": "object",
            "nullable": true,
            "properties": {
              "description": {
                "type": "string",
                "nullable": true
              },
              "embed": {
                "type": "string",
                "nullable": true
              },
              "icon": {
                "type": "object",
                "properties": {
                  "height": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "width": {
                    "type": "integer"
                  }
                }
              },
              "image": {
                "type": "string",
                "nullable": true
              },
              "locations": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "original_url": {
                "type": "string"
              },
              "screenshot_url": {
                "type": "string"
              },
              "site_name": {
                "type": "string"
              },
              "site_url": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          },
          "original_url": {
            "type": "string"
          },
          "affiliate_url": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "site_name": {
            "type": "string"
          },
          "site_url": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "image": {
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "nullable": true
          },
          "hidden": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ShownotesIn": {
        "type": "object",
        "description": "A single modified shownnote item.",
        "properties": {
          "original_url": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "position": {
            "type": "integer"
          },
          "hidden": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ]
          }
        }
      },
      "AnalyticsArray": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Analytics"
        }
      },
      "Analytics": {
        "type": "object",
        "description": "Analytics data",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the episode"
          },
          "id": {
            "type": "integer",
            "description": "Id of the episode"
          },
          "post_id": {
            "type": "integer",
            "description": "Releated post id to the episode."
          },
          "post_date": {
            "type": "string",
            "description": "Releasedate (local time)"
          },
          "post_date_gmt": {
            "type": "string",
            "description": "Releasedate (gmt time)"
          },
          "days_since_release": {
            "type": "integer",
            "description": "Days since the release of the episode."
          },
          "hours_since_release": {
            "type": "integer",
            "description": "Hours since the release of the episode."
          },
          "downloads": {
            "type": "string"
          },
          "3y": {
            "type": "integer",
            "description": "Number of downloads 3 years after release."
          },
          "2y": {
            "type": "integer",
            "description": "Number of downloads 2 years after release."
          },
          "1y": {
            "type": "integer",
            "description": "Number of downloads 1 year after release."
          },
          "3q": {
            "type": "integer",
            "description": "Number of downloads 3 quarters after release."
          },
          "2q": {
            "type": "integer",
            "description": "Number of downloads 2 quarters after release."
          },
          "1q": {
            "type": "integer",
            "description": "Number of downloads 1 quarter after release."
          },
          "4w": {
            "type": "integer",
            "description": "Number of downloads 4 weeks after release."
          },
          "3w": {
            "type": "integer",
            "description": "Number of downloads 3 weeks after release."
          },
          "2w": {
            "type": "integer",
            "description": "Number of downloads 2 weeks after release."
          },
          "1w": {
            "type": "integer",
            "description": "Number of downloads 1 week after release."
          },
          "6d": {
            "type": "integer",
            "description": "Number of downloads 6 days after release."
          },
          "5d": {
            "type": "integer",
            "description": "Number of downloads 5 days after release."
          },
          "4d": {
            "type": "integer",
            "description": "Number of downloads 4 days after release."
          },
          "3d": {
            "type": "integer",
            "description": "Number of downloads 3 days after release."
          },
          "2d": {
            "type": "integer",
            "description": "Number of downloads 2 days after release."
          },
          "1d": {
            "type": "integer",
            "description": "Number of downloads 1 day after release."
          },
          "_links": {
            "type": "object",
            "description": "a few releated links",
            "properties": {
              "self": {
                "type": "string",
                "description": "Link to this analytics page"
              },
              "podlove:episode": {
                "type": "string",
                "description": "Link to the releated episode"
              }
            }
          }
        },
        "example": {
          "title": "Folge 2",
          "id": 2,
          "post_id": 25,
          "post_date": "2021-08-05T20:53:44.000Z",
          "post_date_gmt": "2021-08-05T20:53:44.000Z",
          "days_since_release": 207,
          "hours_since_release": 4967,
          "downloads": "3",
          "3y": 0,
          "2y": 0,
          "1y": 0,
          "3q": 0,
          "2q": 3,
          "1q": 3,
          "4w": 3,
          "3w": 3,
          "2w": 3,
          "1w": 3,
          "6d": 3,
          "5d": 3,
          "4d": 3,
          "3d": 3,
          "2d": 3,
          "1d": 3,
          "_links": {
            "self": "http://podlove.local/wp-json/podlove/v2/analytics/episodes/25",
            "podlove:episode": "http://podlove.local/wp-json/wp/v2/episodes/25"
          }
        }
      },
      "ArrayOfEpisodes": {
        "type": "object",
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "type": "integer"
                },
                "title": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "_version": "v2",
          "results": [
            {
              "id": 10,
              "title": "Folge 1"
            },
            {
              "id": 11,
              "title": "Folge 2"
            }
          ]
        }
      },
      "ArrayOfEpisodesMedia": {
        "type": "object",
        "example": {
          "_version": "v2",
          "results": [
            {
              "asset_id": 1,
              "asset": "MP3 Audio",
              "url": "http://podlove.local/wp-content/uploads/podcast/PodloveTest000.mp3",
              "size": 1502969,
              "enable": true
            },
            {
              "asset_id": 2,
              "asset": "Podlove Simple Chapters",
              "enable": false
            }
          ]
        },
        "title": "",
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "asset_id": {
                  "type": "integer"
                },
                "asset": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "size": {
                  "type": "integer",
                  "nullable": true
                },
                "enable": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "description": ""
      },
      "ArrayOfEpisodesRelated": {
        "type": "object",
        "example": {
          "_version": "v2",
          "relatedEpisodes": [
            {
              "episode_relation_id": 16,
              "related_episode_id": 3,
              "related_episode_title": "Episode 3"
            },
            {
              "episode_relation_id": 18,
              "related_episode_id": 5,
              "related_episode_title": "Episode 5"
            }
          ]
        },
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Related"
            }
          }
        }
      },
      "ArrayOfEpisodesTags": {
        "type": "object",
        "example": {
          "_version": "v2",
          "tags": [
            {
              "term_id": 5,
              "name": "Podcast"
            },
            {
              "term_id": 6,
              "name": "Podlove Publisher"
            }
          ]
        },
        "title": "",
        "description": "",
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "results": {
            "type": "object",
            "properties": {
              "term_id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              }
            }
          }
        }
      },
      "ArrayOfEpisodesContributor": {
        "type": "object",
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "example": {
          "_version": "v2",
          "results": [
            {
              "id": 10
            },
            {
              "id": 11
            }
          ]
        }
      },
      "EpisodeOut": {
        "type": "object",
        "example": {
          "_version": "v2",
          "id": 10,
          "post_id": 80,
          "title": "Title of the episode",
          "title_clean": "Title of the episode",
          "subtitle": "Subtitle of the episode",
          "summary": "Summary of the episode",
          "slug": "PodloveTest000",
          "duration": "00:02:03.453",
          "type": "full",
          "publicationDate": "2022-03-20T12:30:08.000Z",
          "recording_date": "2022-02-20T12:30:08.000Z",
          "poster": "",
          "episode_poster": "",
          "link": "",
          "audio": [
            {
              "url": "http://podlove.local/podlove/file/1/s/webplayer/c/website/PodloveTest000.mp3",
              "size": 1502969,
              "title": "MP3 Audio (mp3)",
              "mimeType": "audio/mpeg"
            }
          ],
          "files": [
            {
              "url": "http://podlove.local/podlove/file/1/s/webplayer/PodloveTest000.mp3",
              "size": 1502969,
              "title": "MP3 Audio (mp3)",
              "mimeType": "audio/mpeg"
            }
          ],
          "number": 10,
          "mnemonic": "LOV010",
          "soundbite_start": "00:00:10",
          "soundbite_duration": "00:00:59",
          "soundbite_title": "A short soundbite from the episode",
          "explicit": false,
          "license_name": "Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License",
          "license_url": "http://creativecommons.org/licenses/by-nc-sa/4.0",
          "season_id": 2
        },
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "id": {
            "description": "Unique identifier for the episode.",
            "type": "integer"
          },
          "post_id": {
            "description": "Releated post_id to the episode.",
            "type": "integer"
          },
          "title": {
            "description": "Episode title generated according to the set of rules",
            "type": "string"
          },
          "title_clean": {
            "description": "Entered title at the episode",
            "type": "string"
          },
          "subtitle": {
            "type": "string",
            "description": "Single sentence describing the episode."
          },
          "summary": {
            "type": "string",
            "description": "A summary of the episode."
          },
          "slug": {
            "type": "string",
            "description": "Episode media file slug."
          },
          "duration": {
            "type": "string",
            "description": "The duration of the episode."
          },
          "type": {
            "type": "string",
            "description": "Episode type. May be used by podcast clients.",
            "enum": [
              "full",
              "trailer",
              "bonus"
            ]
          },
          "publicationDate": {
            "type": "string",
            "description": "Date of the publication of the episode."
          },
          "recording_date": {
            "type": "string"
          },
          "poster": {
            "type": "string"
          },
          "episode_poster": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "audio": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "size": {
                  "type": "integer"
                },
                "title": {
                  "type": "string"
                },
                "mimeType": {
                  "type": "string"
                }
              }
            }
          },
          "files": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "size": {
                  "type": "integer"
                },
                "title": {
                  "type": "string"
                },
                "mimeType": {
                  "type": "string"
                }
              }
            }
          },
          "number": {
            "type": "integer",
            "description": "An epsiode number."
          },
          "mnemonic": {
            "type": "string"
          },
          "soundbite_start": {
            "type": "string",
            "description": "Start value of podcast:soundbite tag"
          },
          "soundbite_duration": {
            "type": "string",
            "description": "Duration value of podcast::soundbite tag"
          },
          "soundbite_title": {
            "type": "string",
            "description": "Title for the podcast::soundbite tag"
          },
          "explicit": {
            "type": "boolean",
            "description": "explicit content?"
          },
          "license_name": {
            "type": "string",
            "description": "Name of the license"
          },
          "license_url": {
            "type": "string",
            "description": "URL to the license"
          },
          "season_id": {
            "description": "Season Id to Episode. This entry is only available if the Seasons module is active.",
            "type": "integer"
          }
        }
      },
      "EpisodeIn": {
        "type": "object",
        "example": {
          "title": "Title of the episode",
          "subtitle": "Subtitle of the episode",
          "summary": "Summary of the episode",
          "number": 10,
          "slug": "PodloveTest001",
          "duration": "00:48:10",
          "soundbite_start": "00:00:10",
          "soundbite_duration": "00:00:59",
          "soundbite_title": "A short soundbite from the episode",
          "explicit": false
        },
        "properties": {
          "title": {
            "description": "Clear, concise name for your episode.",
            "type": "string"
          },
          "subtitle": {
            "type": "string",
            "description": "Single sentence describing the episode."
          },
          "summary": {
            "type": "string",
            "description": "A summary of the episode."
          },
          "number": {
            "type": "integer",
            "description": "An epsiode number."
          },
          "slug": {
            "type": "string",
            "description": "Episode media file slug"
          },
          "type": {
            "type": "string",
            "description": "Episode type. May be used by podcast clients.",
            "enum": [
              "full",
              "trailer",
              "bonus"
            ]
          },
          "episode_poster": {
            "type": "string",
            "description": "An url for the episode cover. This value is only applied if the Episode Asset Image option is set to manual."
          },
          "duration": {
            "type": "string",
            "description": "Duration of the episode. Please, use NormalPlayTime format."
          },
          "soundbite_start": {
            "type": "string",
            "description": "Start value of podcast:soundbite tag"
          },
          "soundbite_duration": {
            "type": "string",
            "description": "Duration value of podcast::soundbite tag"
          },
          "soundbite_title": {
            "type": "string",
            "description": "Title for the podcast::soundbite tag"
          },
          "explicit": {
            "type": "boolean",
            "description": "explicit content?"
          },
          "recording_date": {
            "type": "string"
          },
          "license_name": {
            "type": "string",
            "description": "Name of the license"
          },
          "license_url": {
            "type": "string",
            "description": "URL to the license"
          }
        }
      },
      "EpisodeMediaIn": {
        "type": "object",
        "example": {
          "asset_id": 2,
          "enable": true
        },
        "properties": {
          "asset_id": {
            "type": "integer",
            "description": "Identifier for the asset of an episode"
          },
          "enable": {
            "type": "boolean",
            "description": "Should the asset enable?"
          }
        }
      },
      "EpisodeRelatedIn": {
        "type": "object",
        "example": {
          "related": 5
        },
        "properties": {
          "related": {
            "type": [
              "integer",
              "array"
            ],
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "RelatedIn": {
        "type": "object",
        "example": {
          "episode_id": 1,
          "related_episode_id": 5
        },
        "properties": {
          "related": {
            "type": "object",
            "properties": {
              "episode_id": {
                "type": "string"
              },
              "related_episode_id": {
                "type": "string"
              }
            }
          }
        }
      },
      "Related": {
        "type": "object",
        "example": {
          "episode_id": 1,
          "related_episode_id": 3,
          "related_episode_title": "Episode 3"
        },
        "properties": {
          "episode_id": {
            "type": "integer"
          },
          "related_episode_id": {
            "type": "integer"
          },
          "related_episode_title": {
            "type": "string"
          }
        },
        "description": "Info about an episode relation"
      },
      "RelatedOut": {
        "type": "object",
        "example": {
          "version": "v2",
          "episode_id": 1,
          "related_episode_id": 3,
          "related_episode_title": "Episode 3"
        },
        "properties": {
          "version": {
            "type": "string"
          },
          "episode_id": {
            "type": "integer"
          },
          "related_episode_id": {
            "type": "integer"
          },
          "related_episode_title": {
            "type": "string"
          }
        },
        "description": "Info about an episode relation"
      },
      "EpisodeTagsIn": {
        "type": "object",
        "example": {
          "term_id": 5
        },
        "properties": {
          "term_id": {
            "type": "integer"
          }
        }
      },
      "Chapters": {
        "type": "object",
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "chapters": {
            "type": "array",
            "items": {
              "properties": {
                "start": {
                  "type": "string",
                  "description": "Chapter begin timestamp"
                },
                "title": {
                  "type": "string",
                  "description": "Chapter title"
                },
                "href": {
                  "type": "string",
                  "description": "Chapter url"
                },
                "image": {
                  "type": "string",
                  "description": "Chapter image"
                }
              }
            }
          }
        },
        "example": {
          "_version": "v2",
          "chapters": [
            {
              "start": "00:00:00",
              "title": "Intro"
            },
            {
              "start": "00:00:50",
              "title": "Begrüßung",
              "href": "http://docs.podlove.org",
              "image": "http://podlove.local/wp-content/2022/05/chapter.jpg"
            }
          ]
        }
      },
      "Transcripts": {
        "type": "object",
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "prev": {
            "type": "string"
          },
          "next": {
            "type": "string"
          },
          "transcript": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Id of the part of the transcription."
                },
                "start": {
                  "type": "string",
                  "description": "Timestamp begin of the chaption. (Format HH:MM:SS.sss)"
                },
                "start_ms": {
                  "type": "integer",
                  "description": "Timestamp begin of the chaption. (ms)"
                },
                "end": {
                  "type": "string",
                  "description": "Timestamp end of the chaption. (Format HH:MM:SS.sss)"
                },
                "end_ms": {
                  "type": "integer",
                  "description": "Timestamp end of the chaption. (ms)"
                },
                "voice": {
                  "type": "string",
                  "description": "Name of the speaker."
                },
                "text": {
                  "type": "string",
                  "description": "Content."
                }
              }
            }
          }
        },
        "example": {
          "count": {
            "_version": "v2",
            "count": 723
          },
          "offset_limit": {
            "_version": "v2",
            "prev": "podlove/v2/transcripts/2?offset=10?limit=10",
            "next": "podlove/v2/transcripts/2?offset=30?limit=10",
            "transcript": [
              {
                "start": "00:00:00.005",
                "start_ms": 5,
                "end": "00:00:12.648",
                "end_ms": 12648,
                "voice": "Michi",
                "text": "Hallo und herzlich willkommen zur Folge zwanzig, Episode zwanzig. Ich sage erstmal hallo und dann sage ich kurz wer wir sind. Hallo Alex."
              },
              {
                "start": "00:00:14.385",
                "start_ms": 14385,
                "end": "00:00:15.376",
                "end_ms": 15376,
                "voice": "Michi",
                "text": "Hallo Eric"
              }
            ]
          },
          "Transcripts": {
            "_version": "v2",
            "transcript": [
              {
                "start": "00:00:00.005",
                "start_ms": 5,
                "end": "00:00:12.648",
                "end_ms": 12648,
                "voice": "Michi",
                "text": "Hallo und herzlich willkommen zur Folge zwanzig, Episode zwanzig. Ich sage erstmal hallo und dann sage ich kurz wer wir sind. Hallo Alex."
              },
              {
                "start": "00:00:14.385",
                "start_ms": 14385,
                "end": "00:00:15.376",
                "end_ms": 15376,
                "voice": "Michi",
                "text": "Hallo Eric"
              }
            ]
          }
        }
      },
      "Voices": {
        "type": "object",
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "voices": {
            "type": "array",
            "items": {
              "properties": {
                "voice": {
                  "type": "string",
                  "description": "Name of the speaker."
                },
                "contributor_id": {
                  "type": "integer",
                  "description": "Id of the contributor connected with the voice."
                }
              }
            }
          }
        },
        "example": {
          "_version": "v2",
          "voices": [
            {
              "voice": "Eric",
              "contributor_id": 10
            },
            {
              "voice": "Alex",
              "contributor_id": 11
            }
          ]
        }
      },
      "ChaptionOut": {
        "type": "object",
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "id": {
            "type": "integer",
            "description": "Identifier for the part of the transcription."
          },
          "episode": {
            "type": "integer",
            "description": "Identifier of the episode connected with this part of the transcription."
          },
          "start": {
            "type": "string",
            "description": "Timestamp begin of the chaption. (Format HH:MM:SS.sss)"
          },
          "start_ms": {
            "type": "integer",
            "description": "Timestamp begin of the chaption. (ms)"
          },
          "end": {
            "type": "string",
            "description": "Timestamp end of the chaption. (Format HH:MM:SS.sss)"
          },
          "end_ms": {
            "type": "integer",
            "description": "Timestamp end of the chaption. (ms)"
          },
          "voice": {
            "type": "string",
            "description": "Name of the speaker"
          },
          "text": {
            "type": "string",
            "description": "Content"
          }
        },
        "example": {
          "_version": "v2",
          "id": 1082,
          "episode": 20,
          "start": "00:00:00.005",
          "start_ms": 5,
          "end": "00:00:12.648",
          "end_ms": 12648,
          "voice": "Michi",
          "text": "Hallo und herzlich willkommen zur Folge zwanzig, Episode zwanzig. Ich sage erstmal hallo und dann sage ich kurz wer wir sind. Hallo Alex."
        }
      },
      "ChaptionIn": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "description": "Timestamp begin of the chaption. (Format HH:MM:SS.sss)"
          },
          "end": {
            "type": "string",
            "description": "Timestamp end of the chaption. (Format HH:MM:SS.sss)"
          },
          "text": {
            "type": "string",
            "description": "Content"
          }
        },
        "example": {
          "id": 1082,
          "episode": 20,
          "start": "00:00:00.005",
          "end": "00:00:12.648",
          "text": "Hallo und herzlich willkommen zur Folge zwanzig, Episode zwanzig. Ich sage erstmal hallo und dann sage ich kurz wer wir sind. Hallo Alex."
        }
      },
      "CreateEpisode": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          }
        },
        "example": {
          "message": "Episode successfully created with id 10",
          "location": "null",
          "id": 10
        }
      },
      "CreateContributor": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          }
        },
        "example": {
          "status": "ok",
          "id": 2
        }
      },
      "CreateContributorGroup": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          }
        },
        "example": {
          "status": "ok",
          "id": 2
        }
      },
      "CreateContributorRole": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          }
        },
        "example": {
          "status": "ok",
          "id": 2
        }
      },
      "CreateContributorDefault": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          }
        },
        "example": {
          "status": "ok",
          "id": 2
        }
      },
      "ContributorsOut": {
        "type": "object",
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "contributors": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Identifier of the contributor."
                },
                "identifier": {
                  "type": "string",
                  "description": "The identifier will be used as in internal identifier for e.g. shortcodes."
                },
                "avatar": {
                  "type": "string",
                  "description": "Either a Gravatar email adress or a URL."
                },
                "name": {
                  "type": "string",
                  "description": "The Public Name will be used for public mentions."
                },
                "mail": {
                  "type": "string",
                  "description": "Mail address"
                },
                "department": {
                  "type": "string",
                  "description": "Department of the contributor."
                },
                "organisation": {
                  "type": "string",
                  "description": "Organisation of the contributor."
                },
                "jobtitle": {
                  "type": "string",
                  "description": "Jobtitle of the contributor."
                },
                "gender": {
                  "type": "string",
                  "description": "Gender of the contributor.",
                  "enum": [
                    "male",
                    "female",
                    "Not attributed"
                  ]
                },
                "nickname": {
                  "type": "string",
                  "description": "Nickname of the contributor."
                },
                "count": {
                  "type": "integer",
                  "description": "Number of contributions of the contributor."
                }
              }
            }
          }
        },
        "example": {
          "_version": "v2",
          "contributors": [
            {
              "id": 1,
              "identifier": "Dirk_Developer",
              "avatar": "https://podlove.local/wp-content/uploads/pics/dirk.jpg",
              "name": "Dirk",
              "mail": "null",
              "department": "Entwicklung",
              "organisation": "Podlove",
              "jobtitle": "Entwickler",
              "gender": "male",
              "nickname": "schumi",
              "count": 1
            }
          ]
        }
      },
      "ContributorsIn": {
        "type": "object",
        "properties": {
          "visibility": {
            "type": "string",
            "description": "Should the participation of the contributor be publicilyh visible?",
            "enum": [
              "yes",
              "no"
            ]
          },
          "identifier": {
            "type": "string",
            "description": "The identifier will be used as in internal identifier for e.g. shortcodes."
          },
          "avatar": {
            "type": "string",
            "description": "Either a Gravatar email adress or a URL."
          },
          "realname": {
            "type": "string",
            "description": "Name of contributor."
          },
          "publicname": {
            "type": "string",
            "description": "The publicname will be used for public mentions."
          },
          "nickname": {
            "type": "string",
            "description": "Nickname of the contributor."
          },
          "mail": {
            "type": "string",
            "description": "Mail address"
          },
          "department": {
            "type": "string",
            "description": "Department of the contributor."
          },
          "organisation": {
            "type": "string",
            "description": "Organisation of the contributor."
          },
          "jobtitle": {
            "type": "string",
            "description": "Jobtitle of the contributor."
          },
          "gender": {
            "type": "string",
            "description": "Gender of the contributor.",
            "enum": [
              "male",
              "female",
              "Not attributed"
            ]
          },
          "email": {
            "type": "string",
            "description": "e-mail of the contributor Do not use external."
          }
        },
        "example": {
          "identifier": "Dirk_Developer",
          "avatar": "https://podlove.local/wp-content/uploads/pics/dirk.jpg",
          "realname": "Dirk Schumann",
          "publicname": "Dirk",
          "nickname": "Schumi",
          "mail": "null",
          "department": "Entwicklung",
          "organisation": "Podlove",
          "jobtitle": "Entwickler",
          "gender": "male",
          "email": "dirk@podlove.local"
        }
      },
      "ContributorGroupsArray": {
        "type": "object",
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "groups": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Identifier of the contributor group."
                },
                "slug": {
                  "type": "string",
                  "description": "Slug of the contributor group."
                },
                "title": {
                  "type": "string",
                  "description": "Title of the contributor group."
                }
              }
            }
          }
        },
        "example": {
          "_version": "v2",
          "groups": [
            {
              "id": 2,
              "slug": "production",
              "title": "The group who are responsible for the production"
            }
          ]
        }
      },
      "ContributorGroup": {
        "type": "object",
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "id": {
            "type": "integer",
            "description": "Identifier of the contributor group."
          },
          "slug": {
            "type": "string",
            "description": "Slug of the contributor group."
          },
          "title": {
            "type": "string",
            "description": "Title of the contributor group."
          }
        },
        "example": {
          "_version": "v2",
          "id": 2,
          "slug": "production",
          "title": "The group who are responsible for the production"
        }
      },
      "ContributorRolesArray": {
        "type": "object",
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "roles": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Identifier of the contributor role."
                },
                "slug": {
                  "type": "string",
                  "description": "Slug of the contributor role."
                },
                "title": {
                  "type": "string",
                  "description": "Title of the contributor role."
                }
              }
            }
          }
        },
        "example": {
          "_version": "v2",
          "roles": [
            {
              "id": 1,
              "slug": "moderator",
              "title": "The moderator of the episode."
            }
          ]
        }
      },
      "ContributorRole": {
        "type": "object",
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "id": {
            "type": "integer",
            "description": "Identifier of the contributor role."
          },
          "slug": {
            "type": "string",
            "description": "Slug of the contributor role."
          },
          "title": {
            "type": "string",
            "description": "Title of the contributor role."
          }
        },
        "example": {
          "_version": "v2",
          "id": 1,
          "slug": "moderator",
          "title": "The moderator of the episode."
        }
      },
      "ContributorDefaultsArray": {
        "type": "object",
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "defaults": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Identifier of the default contributor."
                },
                "contributor_id": {
                  "type": "integer",
                  "description": "Identifier of the contributor."
                },
                "show_id": {
                  "type": "integer",
                  "description": "Identifier of the show."
                },
                "role_id": {
                  "type": "integer",
                  "description": "Identifier of the contributor role."
                },
                "group_id": {
                  "type": "integer",
                  "description": "Identifier of the contributor group."
                },
                "position": {
                  "type": "integer",
                  "description": "Position of the default contributor in the list."
                },
                "comment": {
                  "type": "string",
                  "description": "Comment to the default contributor."
                }
              }
            }
          }
        },
        "example": {
          "_version": "v2",
          "defaults": [
            {
              "id": 1,
              "contributor_id": 2,
              "show_id": 0,
              "role_id": 1,
              "group_id": 1,
              "position": 0,
              "comment": "null"
            }
          ]
        }
      },
      "ContributorDefault": {
        "type": "object",
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "id": {
            "type": "integer",
            "description": "Identifier of the default contributor."
          },
          "contributor_id": {
            "type": "integer",
            "description": "Identifier of the contributor."
          },
          "show_id": {
            "type": "integer",
            "description": "Identifier of the show."
          },
          "role_id": {
            "type": "integer",
            "description": "Identifier of the contributor role."
          },
          "group_id": {
            "type": "integer",
            "description": "Identifier of the contributor group."
          },
          "position": {
            "type": "integer",
            "description": "Position of the default contributor in the list."
          },
          "comment": {
            "type": "string",
            "description": "Comment to the default contributor."
          }
        },
        "example": {
          "_version": "v2",
          "id": 1,
          "contributor_id": 2,
          "show_id": 0,
          "role_id": 1,
          "group_id": 1,
          "position": 0,
          "comment": "null"
        }
      },
      "ContributionsEpisodeArray": {
        "type": "object",
        "properties": {
          "_version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "contributors": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Identifier of the contribution to an episode"
                },
                "contributor_id": {
                  "type": "integer",
                  "description": "Identifier of the contributor."
                },
                "role_id": {
                  "type": "integer",
                  "description": "Id of the role for the contributor."
                },
                "group_id": {
                  "type": "integer",
                  "description": "Id of the group for the contributor."
                },
                "position": {
                  "type": "integer",
                  "description": "Identifier to sort the contribution to an episode"
                },
                "comment": {
                  "type": "string",
                  "description": "Comment to the contributor."
                }
              }
            }
          }
        },
        "example": {
          "_version": "v2",
          "contributors": [
            {
              "id": 7,
              "contributor_id": 10,
              "role_id": 1,
              "group_id": 1,
              "position": 0,
              "comment": "Host of the episode."
            },
            {
              "id": 8,
              "contributor_id": 11,
              "role_id": 2,
              "group_id": 1,
              "position": 1,
              "comment": "Guest of the episode."
            }
          ]
        }
      },
      "ContributionsEpisodeArrayIn": {
        "type": "object",
        "properties": {
          "contributors": {
            "type": "array",
            "items": {
              "properties": {
                "contributor_id": {
                  "type": "integer",
                  "description": "Identifier of the contributor."
                },
                "role_id": {
                  "type": "integer",
                  "description": "Id of the role for the contributor."
                },
                "group_id": {
                  "type": "integer",
                  "description": "Id of the group for the contributor."
                },
                "position": {
                  "type": "integer",
                  "description": "Identifier to sort the contribution to an episode"
                },
                "comment": {
                  "type": "string",
                  "description": "Comment to the contributor."
                }
              }
            }
          }
        },
        "example": {
          "contributors": [
            {
              "contributor_id": 10,
              "role_id": 1,
              "group_id": 1,
              "position": 0,
              "comment": "Host of the episode."
            },
            {
              "contributor_id": 11,
              "role_id": 2,
              "group_id": 1,
              "position": 1,
              "comment": "Guest of the episode."
            }
          ]
        }
      },
      "ContributionsEpisode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Identifier of the contribution to an episode"
          },
          "contributor_id": {
            "type": "integer",
            "description": "Identifier of the contributor."
          },
          "role_id": {
            "type": "integer",
            "description": "Id of the role for the contributor."
          },
          "group_id": {
            "type": "integer",
            "description": "Id of the group for the contributor."
          },
          "position": {
            "type": "integer",
            "description": "Identifier to sort the contribution to an episode"
          },
          "comment": {
            "type": "string",
            "description": "Comment to the contributor."
          }
        },
        "example": {
          "id": 7,
          "contributor_id": 10,
          "role_id": 1,
          "group_id": 1,
          "position": 0,
          "comment": "Host of the episode."
        }
      },
      "ContributionCreated": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Was the operation succcessfully?"
          },
          "id": {
            "type": "integer",
            "description": "Identifier of the contributor."
          }
        },
        "example": {
          "status": "ok",
          "id": 7
        }
      },
      "ContributionsEpisodeIn": {
        "type": "object",
        "properties": {
          "contributor_id": {
            "type": "integer",
            "description": "Identifier of the contributor."
          },
          "role_id": {
            "type": "integer",
            "description": "Id of the role for the contributor."
          },
          "group_id": {
            "type": "integer",
            "description": "Id of the group for the contributor."
          },
          "position": {
            "type": "integer",
            "description": "Identifier to sort the contribution to an episode"
          },
          "comment": {
            "type": "string",
            "description": "Comment to the contributor."
          }
        },
        "example": {
          "contributor_id": 10,
          "role_id": 1,
          "group_id": 1,
          "position": 0,
          "comment": "Host of the episode."
        }
      },
      "SocialServicesArray": {
        "type": "array",
        "items": {
          "properties": {
            "id": {
              "type": "integer",
              "description": "Identifier of the service"
            },
            "category": {
              "type": "string",
              "description": "Category of the service",
              "enum": [
                "social",
                "donation",
                "internal"
              ]
            },
            "type": {
              "type": "string",
              "description": "Type of the service"
            },
            "title": {
              "type": "string",
              "description": "Title of the service"
            },
            "description": {
              "type": "string",
              "description": "Description of the service"
            },
            "logo": {
              "type": "string",
              "description": "Logo of the service"
            },
            "url_schema": {
              "type": "string",
              "description": "Url schema that the service use"
            },
            "logo_url": {
              "type": "string",
              "description": "Url of the logo of the service"
            }
          },
          "example": [
            {
              "id": 12,
              "category": "social",
              "type": "github",
              "title": "GitHub",
              "description": "GitHub Account",
              "logo": "github.png",
              "url_scheme": "https://github.com/%account-placeholder%",
              "logo_url": "http://podlove.local/wp-content/plugins/podlove-publisher/lib/modules/social/images/icons/github.png        $ref: '#/components/schemas/SocialServices'"
            }
          ]
        }
      },
      "SocialServices": {
        "type": "object",
        "description": "Social service data",
        "properties": {
          "category": {
            "type": "string",
            "description": "Category of the service",
            "enum": [
              "social",
              "donation",
              "internal"
            ]
          },
          "type": {
            "type": "string",
            "description": "Type of the service"
          },
          "title": {
            "type": "string",
            "description": "Title of the service"
          },
          "description": {
            "type": "string",
            "description": "Description of the service"
          },
          "logo": {
            "type": "string",
            "description": "Logo of the service"
          },
          "url_schema": {
            "type": "string",
            "description": "Url schema that the service use"
          },
          "logo_url": {
            "type": "string",
            "description": "Url of the logo of the service"
          }
        },
        "example": {
          "category": "social",
          "type": "github",
          "title": "GitHub",
          "description": "GitHub Account",
          "logo": "github.png",
          "url_scheme": "https://github.com/%account-placeholder%",
          "logo_url": "http://podlove.local/wp-content/plugins/podlove-publisher/lib/modules/social/images/icons/github.png"
        }
      },
      "ContributorSocialServicesArray": {
        "type": "array",
        "description": "A list of social services from a contributor",
        "items": {
          "properties": {
            "id": {
              "type": "integer",
              "description": "Identifier of the service from the contributor"
            },
            "contributor_id": {
              "type": "integer",
              "description": "Identifier of the contributor"
            },
            "service_id": {
              "type": "integer",
              "description": "Identifier of the service"
            },
            "account_url": {
              "type": "string",
              "description": "Url of the account from the contributor"
            },
            "title": {
              "type": "string",
              "description": "Title of the service - contributor connection"
            },
            "position": {
              "type": "integer",
              "description": "Identifier to sort the services from the contributor"
            }
          },
          "example": [
            {
              "id": 10,
              "contributor_id": 2,
              "service_id": 36,
              "account_url": "http://twitter.com/podlove_org",
              "title": null,
              "position": 1
            },
            {
              "id": 11,
              "contributor_id": 2,
              "service_id": 12,
              "account_url": "http://github.com/podlove",
              "title": "null",
              "position": 2
            }
          ]
        }
      },
      "ContributorSocialServices": {
        "type": "object",
        "description": "A social service data from a contributor",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Identifier of the service from the contributor"
          },
          "contributor_id": {
            "type": "integer",
            "description": "Identifier of the contributor"
          },
          "service_id": {
            "type": "integer",
            "description": "Identifier of the service"
          },
          "account_url": {
            "type": "string",
            "description": "Url of the account from the contributor"
          },
          "title": {
            "type": "string",
            "description": "Title of the service - contributor connection"
          },
          "position": {
            "type": "integer",
            "description": "Identifier to sort the services from the contributor"
          }
        },
        "example": {
          "id": 10,
          "contributor_id": 2,
          "service_id": 36,
          "account_url": "http://twitter.com/podlove_org",
          "title": "null",
          "position": 1
        }
      },
      "ContributorSocialServicesIn": {
        "type": "object",
        "description": "Modified social service data for the podcast",
        "properties": {
          "contributor_id": {
            "type": "integer",
            "description": "Identifier of the contributor"
          },
          "service_id": {
            "type": "integer",
            "description": "Identifier of the service"
          },
          "account": {
            "type": "string",
            "description": "Account value of the social service to create the account_url"
          },
          "title": {
            "type": "string",
            "description": "Title of the service - contributor connection"
          },
          "position": {
            "type": "integer",
            "description": "Identifier to sort the services from the contributor"
          }
        },
        "example": {
          "id": 13,
          "service_id": 36,
          "account": "podlove_org",
          "title": "Podlove twitter account",
          "position": 1
        }
      },
      "ContributorSocialServicesAdd": {
        "type": "object",
        "description": "Add a social service for the podcast",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status message"
          },
          "id": {
            "type": "integer",
            "description": "Identifier of the added social service for the podcast"
          }
        }
      },
      "PodcastSocialServicesArray": {
        "type": "array",
        "description": "A list of social services from the podcast",
        "items": {
          "properties": {
            "id": {
              "type": "integer",
              "description": "Identifier of the service from the contributor"
            },
            "service_id": {
              "type": "integer",
              "description": "Identifier of the service"
            },
            "account_url": {
              "type": "string",
              "description": "Url of the account from the contributor"
            },
            "title": {
              "type": "string",
              "description": "Title of the service - contributor connection"
            },
            "position": {
              "type": "integer",
              "description": "Identifier to sort the services from the contributor"
            }
          },
          "example": [
            {
              "id": 13,
              "service_id": 36,
              "account_url": "http://twitter.com/podlove_org",
              "title": null,
              "position": 1
            }
          ]
        }
      },
      "PodcastSocialServices": {
        "type": "object",
        "description": "A social service data from the podcast",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Identifier of the service from the contributor"
          },
          "service_id": {
            "type": "integer",
            "description": "Identifier of the service"
          },
          "account_url": {
            "type": "string",
            "description": "Url of the account from the contributor"
          },
          "title": {
            "type": "string",
            "description": "Title of the service - contributor connection"
          },
          "position": {
            "type": "integer",
            "description": "Identifier to sort the services from the contributor"
          }
        },
        "example": {
          "id": 13,
          "service_id": 36,
          "account_url": "http://twitter.com/podlove_org",
          "title": "null",
          "position": 1
        }
      },
      "PodcastSocialServicesIn": {
        "type": "object",
        "description": "Modified social service data for the podcast",
        "properties": {
          "service_id": {
            "type": "integer",
            "description": "Identifier of the service"
          },
          "account": {
            "type": "string",
            "description": "Account value of the social service to create the account_url"
          },
          "title": {
            "type": "string",
            "description": "Title of the service - contributor connection"
          },
          "position": {
            "type": "integer",
            "description": "Identifier to sort the services from the contributor"
          }
        },
        "example": {
          "id": 13,
          "service_id": 36,
          "account": "podlove_org",
          "title": "Podlove twitter account",
          "position": 1
        }
      },
      "PodcastSocialServicesAdd": {
        "type": "object",
        "description": "Add a social service for the podcast",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status message"
          },
          "id": {
            "type": "integer",
            "description": "Identifier of the added social service for the podcast"
          }
        }
      }
    },
    "parameters": {
      "EpisodeId": {
        "name": "id",
        "in": "path",
        "description": "Unique identifier for the episode.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "AssetId": {
        "name": "asset_id",
        "in": "path",
        "description": "Unique identifier for the asset. Each asset in an episode's set of assets has an ID starting from 1 (e.g., the first asset has asset_id=1, the second asset has asset_id=2, and so on).",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    }
  }
}
